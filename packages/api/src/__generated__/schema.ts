/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/transports': {
    get: operations['getTransports']
  }
  '/itinerary': {
    get: operations['getItinerary']
  }
  '/activity/{activity_id}/complete': {
    /** Create an event for an activity of type complete */
    post: {
      responses: {
        /** OK */
        204: {
          'application/json': components['schemas']['ApiResponse']
        }
      }
    }
  }
  '/activity/{activity_id}/failure': {
    /** Create an event for an activity of type failure */
    post: {
      requestBody: {
        'application/json': {
          reason?: string
        }
      }
      responses: {
        /** OK */
        204: {
          'application/json': components['schemas']['ApiResponse']
        }
      }
    }
  }
  '/me': {
    /** Get your own user profile */
    get: {
      responses: {
        /** OK */
        200: {
          'application/json': components['schemas']['User']
        }
      }
    }
  }
  '/users': {
    /** Create a new user */
    post: {
      requestBody: {}
      responses: {
        /** OK */
        200: {
          'application/json': components['schemas']['User']
        }
      }
    }
  }
}

export interface operations {
  /** Get all the transports to which you have access */
  getTransports: {
    responses: {
      /** OK */
      200: {
        'application/json': components['schemas']['Transport'][]
      }
    }
  }
  /** Get an itinerary */
  getItinerary: {
    parameters: {
      query: {
        /** ID of the transport to which the itinerary is assigned */
        transportId: string
      }
    }
    responses: {
      /** OK */
      200: {
        'application/json': components['schemas']['Itinerary']
      }
    }
  }
}

export interface components {
  schemas: {
    Auth: {
      token?: string
    }
    Activity: {
      id?: string
      booking_id?: string
      distance?: number
      duration?: number
      type?: 'start' | 'end' | 'pickup' | 'delivery'
      address?: {
        schema?: components['schemas']['Position']
      }
    }
    Transport: {
      transport_id?: string
      busy?: boolean
      capacity?: {
        volume?: number
        weight?: number
      }
      earliestStart?: string
      latestEnd?: string
      metadata?: { [key: string]: any }
      startAddress?: {
        city?: string
        street?: string
        name?: string
        position?: {
          schema?: components['schemas']['Position']
        }
      }
      endAddress?: {
        city?: string
        street?: string
        name?: string
        lon?: number
        lat?: number
      }
    }
    Booking: {
      id: string
      tripId: number
      quantity: number
      shipDate: string
      /** Order Status */
      status: 'placed' | 'approved' | 'delivered'
      complete: boolean
    }
    User: {
      id: number
      username: string
      firstName: string
      lastName: string
      email: string
      password?: string
      phone: string
    }
    Place: {
      position: components['schemas']['Position']
      address?: string
    }
    Position: {
      lon: number
      lat: number
    }
    Plan: { [key: string]: any }
    Itinerary: {
      transport_id: string
      route: { [key: string]: any }
      activities: components['schemas']['Activity'][]
    }
    ApiResponse: {
      code?: number
      type?: string
      message?: string
    }
  }
}
