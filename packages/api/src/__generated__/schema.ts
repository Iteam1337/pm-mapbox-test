/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/transports": {
    get: operations["get_transports"];
  };
  "/itinerary/{transport_id}": {
    get: operations["get_itinerary"];
  };
  "/bookings": {
    post: operations["create_booking"];
  };
}

export interface components {
  schemas: {
    Activity: {
      id: string;
      booking_id: string;
      distance: number;
      duration: number;
      type: "start" | "end" | "pickup" | "delivery";
      position: components["schemas"]["Position"];
    };
    Address: {
      city?: string;
      street?: string;
      name?: string;
      position: components["schemas"]["Position"];
    };
    Dimensions: {
      width?: number;
      length?: number;
      height?: number;
    };
    Transport: {
      transport_id?: string;
      busy?: boolean;
      capacity?: {
        volume?: number;
        weight?: number;
      };
      earliest_start?: string;
      latest_end?: string;
      metadata?: { [key: string]: any };
      start_address?: components["schemas"]["Address"];
      end_address?: components["schemas"]["Address"];
    };
    Booking: {
      id?: string;
      trip_id?: number;
      delivery?: components["schemas"]["Address"];
      pickup?: components["schemas"]["Address"];
      ship_date?: string;
      /** Order Status */
      status?: "placed" | "approved" | "delivered";
      details?: components["schemas"]["BookingDetails"];
    };
    BookingDetails: {
      metadata?: {
        cargo?: string;
        fragile?: boolean;
        recipient?: {
          contact?: string;
          name?: string;
          info?: string;
        };
        sender?: {
          contact?: string;
          name?: string;
          info?: string;
        };
      };
      weight?: number;
      volume?: number;
      dimensions?: components["schemas"]["Dimensions"];
      loading_meters?: number;
      quantity?: number;
    };
    Position: {
      lon: number;
      lat: number;
    };
    Plan: { [key: string]: any };
    Itinerary: {
      transport_id: string;
      route: { [key: string]: any };
      activities: components["schemas"]["Activity"][];
    };
    ApiResponse: {
      code?: number;
      type?: string;
      message?: string;
    };
  };
}

export interface operations {
  get_transports: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Transport"][];
        };
      };
    };
  };
  get_itinerary: {
    parameters: {
      path: {
        /** ID of the transport to which the itinerary is assigned */
        transport_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Itinerary"];
        };
      };
    };
  };
  create_booking: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Booking"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          trip_id: number;
          pickup: components["schemas"]["Address"];
          delivery: components["schemas"]["Address"];
          metadata: { [key: string]: any };
          size: {
            /** Weight in kilograms */
            weight: number;
            dimensions: components["schemas"]["Dimensions"];
          };
        };
      };
    };
  };
}
