import { TelegrafContext } from 'telegraf/typings/context'
import { Message } from 'telegraf/typings/telegram-types'
import bot from '../adapters/bot'
import * as helpers from '../helpers'
import { Booking, Instruction } from '../types'
import { getDirectionsFromActivities, getDirectionsUrl } from './google'
import { getAddressFromCoordinate } from './pelias'

export const onBotStart = (ctx: TelegrafContext): void => {
  ctx.reply(
    "V칛lkommen till Predictive Movement. N칛r du loggat in kan du agera som f칬rare och h칛mta och leverera paket i v친rt system. Logga in genom att skriva '/login'."
  )
}

export const onPromptUserForTransportId = (
  ctx: TelegrafContext
): Promise<Message> => ctx.reply('Ange ditt transport-id')

export const onNoVehicleFoundFromId = (
  ctx: TelegrafContext
): Promise<Message> =>
  ctx.reply('Inget fordon som matchar ditt angivna ID kunde hittas...')

export const onDriverLoginSuccessful = (
  ctx: TelegrafContext
): Promise<Message> =>
  ctx.reply(
    'Tack! Du kommer nu f친 instruktioner f칬r hur du ska h칛mta upp de bokningar som du har tilldelats.'.concat(
      '\nKlicka p친 "gemet" nere till v칛nster om textf칛ltet och v칛lj "location", sedan "live location" f칬r att dela din position. :)'
    )
  )

export const onNoInstructionsForVehicle = (
  ctx: TelegrafContext
): Promise<Message> => ctx.reply('Vi kunde inte hitta n친gra instruktioner...')

export const onInstructionsForVehicle = (
  activities: Instruction[],
  bookingIds: string[],
  id: number
): Promise<Message> => {
  const directions = getDirectionsFromActivities(activities)

  return bot.telegram.sendMessage(
    id,
    `${bookingIds.length} paket finns att h칛mta. [Se p친 kartan](${directions}).`,
    { parse_mode: 'Markdown' }
  )
}

export const sendDriverFinishedMessage = (
  telegramId: number
): Promise<Message> =>
  bot.telegram.sendMessage(telegramId, 'Bra jobbat! Tack f칬r idag!')

export const sendPickupInstruction = async (
  instructionGroup: Instruction[],
  telegramId: number,
  bookings: Booking[]
): Promise<Message> => {
  const [firstBooking] = bookings

  const pickup =
    firstBooking.pickup.street && firstBooking.pickup.city
      ? `${firstBooking.pickup.street}, ${firstBooking.pickup.city}`
      : await getAddressFromCoordinate({ ...firstBooking.pickup })

  const delivery =
    firstBooking.delivery.street && firstBooking.delivery.city
      ? `${firstBooking.delivery.street}, ${firstBooking.delivery.city}`
      : await getAddressFromCoordinate({ ...firstBooking.delivery })

  const message = (instructionGroup.length === 1
    ? `游꾸 Din n칛sta destination 칛r [${pickup}](${getDirectionsUrl(
        pickup
      )}) d칛r du ska h칛mta paket "${helpers
        .getLastFourChars(instructionGroup[0].id)
        .toUpperCase()}". Paketet ska sedan vidare till ${delivery}.`
    : `游꾸 H칛mta f칬ljande paket:
${instructionGroup
  .map((ig, i) => `${++i}. ${helpers.getLastFourChars(ig.id).toUpperCase()}`)
  .join('\n')}\nvid [${pickup}](${getDirectionsUrl(pickup)})`
  )
    .concat(
      firstBooking.metadata.sender?.contact &&
        `\n\nDu kan n친 avs칛ndaren p친 telefon: ${firstBooking.metadata.sender.contact}`
    )
    .concat(
      '\nTryck p친 "[Framme]" n칛r du har kommit till upph칛mtningsadressen.'
    )

  return bot.telegram.sendMessage(telegramId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'Framme',
            callback_data: JSON.stringify({
              e: 'arrived',
            }),
          },
        ],
      ],
    },
    disable_web_page_preview: true,
  })
}

export const sendDeliveryInstruction = async (
  instructionGroup: Instruction[],
  telegramId: number,
  bookings: Booking[]
): Promise<Message> => {
  const [firstBooking] = bookings
  const delivery =
    firstBooking.delivery.street && firstBooking.delivery.city
      ? `${firstBooking.delivery.street}, ${firstBooking.delivery.city}`
      : await getAddressFromCoordinate({ ...firstBooking.delivery })

  const message = (instructionGroup.length === 1
    ? `游꾸 Leverera paket "${helpers
        .getLastFourChars(instructionGroup[0].id)
        .toUpperCase()}" `
    : `游꾸 Leverera f칬ljande paket:
  ${instructionGroup
    .map((ig, i) => `${++i}. ${helpers.getLastFourChars(ig.id).toUpperCase()}`)
    .join('\n')}\n`
  )
    .concat(`till [${delivery}](${getDirectionsUrl(delivery)})!\n`)
    .concat(
      firstBooking.metadata.recipient?.contact &&
        `\nDu kan n친 mottagaren p친 telefon: ${firstBooking.metadata.recipient.contact}`
    )
    .concat('\nTryck "[Framme]" n칛r du har anl칛nt till upph칛mtningsplatsen.')
  return bot.telegram.sendMessage(telegramId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'Framme',
            callback_data: JSON.stringify({
              e: 'arrived',
            }),
          },
        ],
      ],
    },
    disable_web_page_preview: true,
  })
}

export const sendPickupInformation = (
  instructionGroupId: string,
  telegramId: number,
  bookings: Booking[]
): Promise<Message> => {
  const totalWeight = bookings.reduce(
    (prev, curr) => prev + curr.size.weight || 0,
    0
  )
  const heaviestPackage = Math.max(...bookings.map((b) => b.size.weight || 0))

  const packageInfos = bookings
    .map((b) =>
      `\nID: ${helpers.getLastFourChars(b.id).toUpperCase()}\n`
        .concat(
          b.metadata?.sender?.info
            ? `Extra information vid upph칛mtning: ${b.metadata.sender.info}\n`
            : ''
        )
        .concat(`칐mt친ligt: ${b.metadata?.fragile ? 'Ja' : 'Nej'}`)
        .concat(b.size.weight ? `\nVikt: ${b.size.weight}kg` : '')
        .concat(
          b.size.measurement && b.size.measurement.length === 3
            ? `\nM친tt: ${b.size.measurement[0]}x${b.size.measurement[1]}x${b.size.measurement[2]}cm`
            : ''
        )
    )
    .join('\n')

  const message = '***Paketinformation***'
    .concat(
      bookings.length > 1
        ? `\nTotal vikt: ${Math.round(totalWeight * 100) / 100}kg`.concat(
            `\nDet tyngsta paketet v칛ger ${heaviestPackage}kg\n`
          )
        : ''
    )

    .concat(packageInfos)
    .concat(
      `\n\nTryck p친 "[H칛mtat]" n칛r du h칛mtat upp ${
        bookings.length > 1 ? 'paketen' : 'paketet'
      }.`
    )

  return bot.telegram.sendMessage(telegramId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'H칛mtat',
            callback_data: JSON.stringify({
              e: 'picked_up',
              id: instructionGroupId,
            }),
          },
        ],
      ],
    },
    disable_web_page_preview: true,
  })
}

export const sendDeliveryInformation = (
  instructionGroup: Instruction[],
  instructionGroupId: string,
  telegramId: number,
  bookings: Booking[]
): Promise<Message> => {
  const [firstBooking] = bookings
  return bot.telegram.sendMessage(
    telegramId,
    ` ${
      firstBooking.metadata?.recipient?.contact
        ? 'Du kan nu n친 mottagaren p친 ' +
          firstBooking.metadata.recipient.contact +
          '\n'
        : ''
    }`
      .concat(
        firstBooking.metadata?.recipient?.info
          ? `\nExtra information vid avl칛mning: ${firstBooking.metadata.recipient.info}`
          : ''
      )
      .concat(
        `\nTryck "[Levererat]" n칛r du har l칛mnat ${
          instructionGroup.length > 1 ? 'paketen' : 'paketet'
        }, eller "[Kunde inte leverera]" om du av n친gon anledning inte kunde leverera ${
          instructionGroup.length > 1 ? 'paketen' : 'paketet'
        }.`
      ),
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'Levererat',
              callback_data: JSON.stringify({
                e: 'delivered',
                id: instructionGroupId,
              }),
            },
            {
              text: 'Kunde inte leverera',
              callback_data: JSON.stringify({
                e: 'delivery_failed',
                id: instructionGroupId,
              }),
            },
          ],
        ],
      },
      disable_web_page_preview: true,
    }
  )
}
